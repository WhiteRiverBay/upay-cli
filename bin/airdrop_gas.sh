#!/bin/bash

source ./env.sh

# airdrop to the addresses in the prepared wallet file, generated by prepare.sh
CHAIN_NAME=$1
PREPARED_FILE=$2 # from prepare.sh


# how many times to multiply the single tx fee
MULTIPLIER=$3

CHAIN_TYPE=$(cat .upay.json | jq -r .chains.$CHAIN_NAME.type)
txFeeEstimateInWei=$(cat .upay.json | jq -r .chains.$CHAIN_NAME.airdrop.txFeeEstimateInWei)
RPC=$(cat .upay.json | jq -r .chains.$CHAIN_NAME.provider)
AIRDROP_CONSTRACT=$(cat .upay.json | jq -r .chains.$CHAIN_NAME.airdrop.address)
DECIMALS=$(cat .upay.json | jq -r .chains.$CHAIN_NAME.decimals)

# $txFeeEstimateInWei * $MULTIPLIER / 10^$DECIMALS, keeps all the decimals
EACH_ADDRESS_GAS=$(echo "scale=$DECIMALS; $txFeeEstimateInWei * $MULTIPLIER / 10^$DECIMALS" | bc)

echo $EACH_ADDRESS_GAS

# EACH_ADDRESS_GAS=$(echo "$txFeeEstimateInWei * $MULTIPLIER" | bc)

# airdrop file name
AIRDROP_TEMP_FILE=$DATA_DIR/$CHAIN_NAME.airdrop.$ts.tmp


function prepare_tmp_file {
    # if file exists delete it
    if [ -f $AIRDROP_TEMP_FILE ]; then
        rm $AIRDROP_TEMP_FILE
    fi
    # read the prepared file, echo address,amount\n to a new file
    cat $PREPARED_FILE | while read line; do
        address=$(echo $line | awk -F',' '{print $1}')
        amount=$EACH_ADDRESS_GAS
        echo "$address,$amount" >>$AIRDROP_TEMP_FILE
    done
}

function airdrop_ether_gas {
    prepare_tmp_file

    # confirm the file exists
    if [ ! -f $AIRDROP_TEMP_FILE ]; then
        echo "temp file not found"
        exit 1
    fi

    # read private key from console
    echo "Please enter the private key for airdrop: "
    read -s AIRDROP_PRIVATE_KEY

    $UPAY airdrop --rpc $RPC --type evm --file $AIRDROP_TEMP_FILE --privateKey $AIRDROP_PRIVATE_KEY --airdropContract $AIRDROP_CONSTRACT
}

function airdrop_tron_gas {
    prepare_tmp_file

    # confirm the file exists
    if [ ! -f $AIRDROP_TEMP_FILE ]; then
        echo "temp file not found"
        exit 1
    fi

    # read private key from console
    echo "Please enter the private key for airdrop: "
    read -s AIRDROP_PRIVATE_KEY

    $UPAY airdrop --rpc $RPC --type tron --file $AIRDROP_TEMP_FILE --privateKey $AIRDROP_PRIVATE_KEY --airdropContract $AIRDROP_CONSTRACT
}

# if is evm chain
if [ "$CHAIN_TYPE" == "evm" ]; then
    airdrop_ether_gas
elif [ "$CHAIN_TYPE" == "tron" ]; then
    airdrop_tron_gas
else
    echo "invalid chain type"
    exit 1
fi
